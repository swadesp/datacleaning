install.packages("KernSmooth")
library(KernSmooth)
exit
quit()
license()
?cor
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
print(relation)
summary(relation)
predict(relation, 150)
result <- predict(relation, 150)
result <- predict(relation, as.data.frame(150)
)
a <- data.frame(x = 170)
result <-  predict(relation,a)
View(a)
result
?lm
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f(2)
f(0)
z
f <- function(x) {
z <- 4
x + g(x)
g <- function(y) {
y + z
}
}
f(3)
f <- function(x) {
z <- 4
g <- function(y) {
y + z
}
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
set.seed(1)
rpois(5, 2)
class(rpois(5,2))
summary(rpois(5,2))
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
summary(e)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
setwd("~/GitHub/datacleaning/Quiz2")
if(!require("sqldf")) {
install.packages("sqldf")
}
library(sqldf)
# Read survey data
fileList <- list.files()
if(!"getdata-data-ss06pid.csv" %in% fileList)
{
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
}
cd
cd()
getwd()
if(!"getdata-data-ss06pid.csv" %in% fileList)
{
destfile = "./getdata-data-ss06pid.csv"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
}
if(!"getdata-data-ss06pid.csv" %in% fileList)
{
destFile = "./getdata-data-ss06pid.csv"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = destFile)
}
acs <- read.csv("getdata-data-ss06pid.csv", header=TRUE, sep=",")
head(acs)
View(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
k <- sqldf("select pwgtp1 from acs where AGEP < 50")
View(k)
View(acs)
names(acs)
l <- data.frame(acs$AGEP, acs$pwgtp1)
View(l)
m <- sqldf("select pwgtp1 from acs where AGEP $$\lt$$ 50")
unique(acs$AGEP)
ans <- unique(acs$AGEP)
ans <- data.frame(ans)
View(ans)
ans1 <- sqldf("select distinct AGEP from acs")
View(ans)
View(ans1)
ans1
t(ans1)
t(ans)
siteLink <- "http://biostat.jhsph.edu/~jleek/contact.html"
siteInfo <- url(siteLink)
siteData <- readLines(siteInfo)
siteLink <- "http://biostat.jhsph.edu/~jleek/contact.html"
siteInfo <- url(siteLink)
siteData <- readLines(siteInfo)
fileList <- list.files()
if(!"getdata-wksst8110.for" %in% fileList)
{
destFile = "./getdata-wksst8110.for"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
destfile = destFile)
}
data <- read.csv("getdata-wksst8110.for", header=TRUE)
head(data)
View(data)
dim(data)
View(data)
data <- read.fwf("getdata-wksst8110.for",
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip = 4)
View(data)
dat <- read.csv("getdata-wksst8110.for", header=TRUE)
View(dat)
data <- read.fwf("getdata-wksst8110.for",
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 4)
ans <- sum(data[,4])
print(ans)
head(data)
View(data)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "e035d1bf252a2c05ee12",
secret = "ca04a39f9c83ef069c67cac46b7d5fa618712b7a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "e035d1bf252a2c05ee12",
secret = "ca04a39f9c83ef069c67cac46b7d5fa618712b7a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
# convert unstructured json to structured json
library(jsonlite)
jsondata <- fromJSON(toJSON(content(req)))
# find out the created time of datasharing repo
subset(jsondata, name == "datasharing", select = c(created_at))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "e035d1bf252a2c05ee12",
secret = "ca04a39f9c83ef069c67cac46b7d5fa618712b7a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonlite)
jsondata <- fromJSON(toJSON(content(req)))
subset(jsondata, name == "datasharing", select = c(created_at))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "e035d1bf252a2c05ee12",
secret = "ca04a39f9c83ef069c67cac46b7d5fa618712b7a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
#req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
#stop_for_status(req)
#content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
#BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
# Convert unstructured json to structured json
library(jsonlite)
jsonData <- fromJSON(toJSON(content(req)))
# find out the created time of datasharing repo
subset(jsonData, name == "datasharing", select = c(created_at))
k <- subset(jsonData, name == "datasharing", select = c(created_at))
View(k)
subset(jsonData, name == "datasharing", select = c(created_at))[1]
print(k)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output[[4]]
output$NAME
output$name
subset(jsonData, name == "jtleek/datasharing", select = c(created_at))
subset(jsonData, name == "datasharing", select = c(created_at))
jsonData
subset(jsonData, name == "datasharing", select = created_at)
subset(jsonData, name == "datasharing", select = "created_at")
subset(jsonData, name == "datasharing", select = "created_at", row.names = FALSE)
subset(jsonData, name == "datasharing", select = c(created_at), row.names(jsonData) = FALSE)
subset(jsonData, name == "datasharing", select = c(created_at), row.names(jsonData))
creationTime <- subset(jsonData, name == "datasharing", select = c(created_at), row.names(creation_Time))
creationTime <- subset(jsonData, name == "datasharing", select = c(created_at))
View(creationTime)
row.names(creationTime) <- NULL
View(creationTime)
creationTime <- subset(jsonData, name == "datasharing", select = c(created_at), row.names(creationTime) <- NULL)
creationTime <- subset(jsonData, name == "datasharing", select = c(created_at))
row.names(creationTime) <- NULL
print(creationTime)
ans <- subset(jsonData, name == "datasharing", select = c(created_at))
row.names(ans) <- NULL
print(ans)
siteLink <- "http://biostat.jhsph.edu/~jleek/contact.html"
siteInfo <- url(siteLink)
siteData <- readLines(siteInfo)
close(siteInfo)
ans <- sapply(siteData[c(10, 20, 30, 100)], nchar)
print(ans)
ans
k <- data.frame(ans)
View(k)
ans(1:length(ans))
ans[1:length(ans))]
ans[1:length(ans)]
row.names(ans) <- NULL
print(ans)
col.names(ans) <- NULL
t(ans)
ans <- t(sapply(siteData[c(10, 20, 30, 100)], nchar))
col.names(ans) <- NULL
print(ans)
ans <- sapply(siteData[c(10, 20, 30, 100)], nchar)
print(ans)
